#!/bin/bash

set -euo pipefail

install_reporter() {
  if [ -f ./cc-test-reporter ]; then
    printf -- "--- :codeclimate: Using local binary ./cc-test-reporter"
  else
    printf -- "--- :codeclimate: Installing %s cc-test-reporter\\n" "${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_VERSION}"

    curl --location --silent \
      "https://codeclimate.com/downloads/test-reporter/test-reporter-${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_VERSION}-linux-amd64" > ./cc-test-reporter
    chmod +x ./cc-test-reporter
  fi
}

download_artifacts() {
  printf -- "--- :buildkite: downloading artifact\\n"
  buildkite-agent artifact download "${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_ARTIFACT}" ./
}

format_file() {
  printf -- "Formatting file: %s\\n" "$1"
  ./cc-test-reporter format-coverage ${debug:+"-d"} \
    --input-type "${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_INPUT_TYPE}" \
    --prefix "${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_PREFIX}" \
    --output "coverage/codeclimate.$2.json" \
    "$1"
}

report_coverage() {
  printf -- "--- :codeclimate: reporting coverage\\n"

  count=1
  for f in ${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_ARTIFACT}; do
    format_file "$f" "$count" &
    (( count++ ))
  done

  wait

  if [[ -v BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_PARTS ]] ; then
    SUM_PARTS="--parts ${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_PARTS}"
  else
    SUM_PARTS=""
  fi
  ./cc-test-reporter sum-coverage ${debug:+"-d"} ${SUM_PARTS} coverage/codeclimate.*.json

  ./cc-test-reporter upload-coverage ${debug:+"-d"}
}

if [[ -z "${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_VERSION:-}" ]] ; then
  BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_VERSION="latest"
fi

debug=""
[[ -v BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_DEBUG ]] && debug="yes"

# hack necessary for working with monorepos and our golang tests
if [[ -v BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_WORKDIR ]] ; then
  cd ${BUILDKITE_PLUGIN_CODECLIMATE_TEST_REPORTER_WORKDIR}
fi

install_reporter
download_artifacts
report_coverage
